import time
import hmac
import hashlib
import requests

'''
All private API requires 3 authentication parameters and zero or more API specific parameters.
    access_key  Your access key.
    tonce       tonce is a timestamp in integer, stands for milliseconds elapsed since Unix epoch.
                Tonce must be within 30 seconds of server's current time. Each tonce can only be used once.
    signature   Signature of the API request, generated by you, use your secret key.

if it useful you can make a donation
GIO: GQksGKKU6PotrByC8hQzBRwMAN7FuMNugF
DOGE: D8Hy4stikB4Pk8rnSfhQxgdZ59GqmasdPj
ETH: 0x290fE67efA690AE7924DB416d4239daC9c309b97
'''


class GraviexPrivateAPI:
    def __init__(self, access_key=None, secret_key=None):
        self.base_url = "https://graviex.net/"
        self.uri_main = "/webapi/v3/"
        self.access = access_key
        self.secret = secret_key

    def call_api(self, path, sub_path=None, params=None, get=True):
        # Если много запросов летит сразу тут можно еще поколдовать
        # Tonce must be within 30 seconds of server's current time.
        tonce = int(time.time()) * 1000
        if not params:
            params = {}

        # Чистим параметры от None
        for key in list(params):
            if params[key] is None:
                del params[key]

        # Костыль для функций использующих параметр from
        bad_key = 'frome'
        if bad_key in params:
            params['from'] = params.pop(bad_key)

        # Добавляем обязательные параметры и сортируем ключи
        params.update(dict(tonce=tonce, access_key=self.access))
        params_keys = list(params.keys())
        params_keys.sort()

        # Формируем запросы для корректной подписи
        request = ''
        for key in params_keys:
            value = params[key]
            request += f'{key}={value}&'
        if sub_path:
            uri = f'{self.uri_main}{path}/{sub_path}'
        else:
            uri = f'{self.uri_main}{path}'
        if get:
            verb = 'GET'
        else:
            verb = 'POST'
        message = f'{verb}|{uri}|{request[:-1]}'

        # Наколдовали теперь подпишем
        signature = hmac.new(
            # if api Secret Key not in bytes replace self.secret to
            # bytes(self.secret, encoding='utf-8'),
            self.secret,
            message.encode(),
            hashlib.sha256
        ).hexdigest()

        # Слепим из приготовленнго URL и скормим зверюге requests
        query = f'{self.base_url}{uri}?{request}signature={signature}'
        if get:
            response = requests.get(query)
        else:
            response = requests.post(query)

        return response.json()

    def get_members_me(self):
        return self.call_api('members', sub_path='me')

    def get_account_history(self, currency=None, limit=None, tx_type=None,
                            from_date=None, to_date=None, page=None, sorted_by=None):
        return self.call_api('account', sub_path='history', params=dict(currency=currency,
                                                                        limit=limit,
                                                                        type=tx_type,
                                                                        frome=from_date,
                                                                        to=to_date,
                                                                        page=page,
                                                                        order_by=sorted_by))

    def get_deposits(self, currency=None, limit=None, state=None):
        return self.call_api('deposits', params=dict(currency=currency,
                                                     limit=limit,
                                                     state=state))

    def get_deposit(self, tx_id):
        return self.call_api('deposit', params=dict(tx_id=tx_id))

    def get_deposit_address(self, currency):
        return self.call_api('deposit_address', params=dict(currency=currency))

    def get_gen_deposit_address(self, currency):
        return self.call_api('gen_deposit_address', params=dict(currency=currency))

    def get_orders(self, market=None, state=None, limit=None, page=None, order_by=None):
        return self.call_api('orders', params=dict(market=market,
                                                   state=state,
                                                   limit=limit,
                                                   page=page,
                                                   order_by=order_by))

    def get_orders_history(self, market=None, state=None, limit=None,
                           from_date=None, to_date=None, page=None, order_by=None):
        return self.call_api('orders', sub_path='history', params=dict(market=market,
                                                                       state=state,
                                                                       limit=limit,
                                                                       frome=from_date,
                                                                       to=to_date,
                                                                       page=page,
                                                                       order_by=order_by))

    def get_order(self, order_id):
        return self.call_api('order', params=dict(id=order_id))

    def get_order_book(self, asks_limit=None, bids_limit=None):
        return self.call_api('order_book', params=dict(asks_limit=asks_limit,
                                                       bids_limit=bids_limit))

    def get_my_trades(self, limit=None, timestamp=None, from_id=None, to_id=None, order_by=None):
        return self.call_api('trades', sub_path='my', params=dict(limit=limit,
                                                                  timestamp=timestamp,
                                                                  frome=from_id,
                                                                  to=to_id,
                                                                  order_by=order_by))

    def get_trades_history(self, market=None, limit=None, from_date=None,
                           to_date=None, page=None, order_by=None):
        return self.call_api('trades', sub_path='history', params=dict(market=market,
                                                                       limit=limit,
                                                                       frome=from_date,
                                                                       to=to_date,
                                                                       page=page,
                                                                       order_by=order_by))

    def get_settings(self):
        return self.call_api('settings')

    def get_withdraws(self, limit=None, state=None):
        return self.call_api('withdraws', params=dict(limit=limit, state=state))

    def get_fund_sources(self, currency):
        return self.call_api('currency', params=dict(currency=currency))

    def get_strategies_list(self):
        return self.call_api('strategies', sub_path='list')

    def get_my_strategies(self):
        return self.call_api('strategies', sub_path='my')

    def post_register_device(self, device_id):
        return self.call_api('members', sub_path='me/register_device',
                             params=dict(device=device_id), get=False)

    def post_update_preferences(self, locale, notify_balances, notify_trades,
                                notify_withdraws, notify_deposits):
        return self.call_api('members', sub_path='me/update_preferences',
                             params=dict(locale=locale,
                                         notify_balances=notify_balances,
                                         notify_trades=notify_trades,
                                         notify_withdraws=notify_withdraws,
                                         notify_deposits=notify_deposits), get=False)

    def post_orders(self, market, side, volume, price=None, ord_type=None):
        return self.call_api('orders', params=dict(market=market, side=side, volume=volume,
                                                   price=price, ord_type=ord_type), get=False)

    def post_orders_clear(self, side):
        return self.call_api('orders', sub_path='clear', params=dict(side=side), get=False)

    def post_order_delete(self, order_id):
        return self.call_api('order', sub_path='delete', params=dict(id=order_id), get=False)

    def post_settings_store(self, data):
        return self.call_api('settings', sub_path='store', params=dict(data=data), get=False)

    def post_create_withdraw(self, currency, address, amount, provider=None, speed_up=None):
        return self.call_api('create_withdraw', params=dict(currency=currency,
                                                            fund_uid=address,
                                                            sum=amount,
                                                            provider=provider,
                                                            speed_up=speed_up), get=False)

    def post_create_fund_source(self, currency, address, label, provider=None):
        return self.call_api('create_fund_source', params=dict(currency=currency,
                                                               uid=address,
                                                               extra=label,
                                                               fund_uid=provider), get=False)

    def post_remove_fund_source(self, source_id):
        return self.call_api('remove_fund_source', params=dict(id=source_id), get=False)

    def post_strategy_cancel(self, strategy_id):
        return self.call_api('strategy', sub_path='cancel', params=dict(id=strategy_id), get=False)

    def post_strategy_create(self, market=None, strategy=None, config=None):
        return self.call_api('strategy', sub_path='create', params=dict(market=market,
                                                                        strategy=strategy,
                                                                        config=config), get=False)

    def post_strategy_update(self, strategy_id, config=None):
        return self.call_api('strategy', sub_path='update', params=dict(id=strategy_id,
                                                                        config=config), get=False)

    def post_strategy_activate(self, strategy_id):
        return self.call_api('strategy', sub_path='activate', params=dict(id=strategy_id), get=False)

    def post_strategy_deactivate(self, strategy_id):
        return self.call_api('strategy', sub_path='deactivate', params=dict(id=strategy_id), get=False)


if __name__ == '__main__':
    # 6000 requests/keypair/5 minutes, you can contact GRAVIEX if you need more.
    gex_private = GraviexPrivateAPI(
        access_key='',
        secret_key=b''
    )
    # Get your profile and accounts info
    # profile = gex_private.get_members_me()
    # print(profile)
    # acc_history = gex_private.get_account_history()
    # print(acc_history)
    # deposits = gex_private.get_deposits()
    # print(deposits)
